<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on flatpickr</title>
    <link>https://chmln.github.io/flatpickr/</link>
    <description>Recent content in Introduction on flatpickr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Thu, 02 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chmln.github.io/flatpickr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>https://chmln.github.io/flatpickr/getting-started/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/getting-started/</guid>
      <description>Installation Installing a flatpickr module flatpickr is available on npm and bower. Use either one to easily stay up to date with new features and (inevitably) bugfixes.
# using npm install npm i flatpickr --save # bower bower install flatpickr-calendar --save # or, if you like yarn better yarn add flatpickr  Non-module environments If, for any reason, you are constained to a non-module environment (e.g. no bundlers such as webpack) - don&amp;rsquo;t fret.</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://chmln.github.io/flatpickr/examples/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/examples/</guid>
      <description>Unless otherwise specified, the markup for examples below consists of just an input element, and flatpickr invocation with a given config.
Basic flatpickr without any config. Some features right off the bat:
 The year is scrollable and can be typed in The month name is scrollable  DateTime { enableTime: true }  Human-friendly Dates altInput hides your original input and creates a new one.
Upon date selection, the original input will contain a Y-m-d.</description>
    </item>
    
    <item>
      <title>The flatpickr Instance</title>
      <link>https://chmln.github.io/flatpickr/instance-methods-properties-elements/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/instance-methods-properties-elements/</guid>
      <description>Retrieving the flatpickr instance You may store the instance by assigning the result of an invocation to a variable.
Here are a few ways to do it.
const fp = flatpickr(&amp;#34;#myID&amp;#34;, {}); // flatpickr const myInput = document.querySelector(&amp;#34;.myInput&amp;#34;); const fp = flatpickr(myInput, {}); // flatpickr const calendars = flatpickr(&amp;#34;.calendar&amp;#34;, {}); calendars[0] // flatpickr  And if you&amp;rsquo;ve forgot to save the instance to a variable
flatpickr(&amp;#34;#myInput&amp;#34;, {}); // invocation without saving to a var // .</description>
    </item>
    
    <item>
      <title>Events &amp; Hooks</title>
      <link>https://chmln.github.io/flatpickr/events/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/events/</guid>
      <description>Events flatpickr has 5 event hooks for the most common and useful actions. For each hook, you may specify a single function, or an array of functions. Callback arguments are explained below.
selectedDates is an array of Date objects selected by the user. When there are no dates selected, the array is empty.
dateStr is a string representation of the latest selected Date object by the user. The string is formatted as per thedateFormatoption.</description>
    </item>
    
    <item>
      <title>Options</title>
      <link>https://chmln.github.io/flatpickr/options/</link>
      <pubDate>Fri, 03 Mar 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/options/</guid>
      <description>An always up-to-date list of options may be found at options.ts
  Config Option Type Default Description     altFormat String &#34;F j, Y&#34; Exactly the same as date format, but for the altInput field   altInput Boolean false Show the user a readable date (as per altFormat), but return something totally different to the server.   altInputClass String &#34;&#34; This class will be added to the input element created by the altInput option.</description>
    </item>
    
    <item>
      <title>Formatting Tokens</title>
      <link>https://chmln.github.io/flatpickr/formatting/</link>
      <pubDate>Fri, 03 Mar 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/formatting/</guid>
      <description> Each character in the table below can be used in dateFormat and altFormat options to achieve the format you need.
Date Formatting Tokens    Character Description Example     d Day of the month, 2 digits with leading zeros 01 to 31   D A textual representation of a day Mon through Sun   l (lowercase &#39;L&#39;) A full textual representation of the day of the week Sunday through Saturday   j Day of the month without leading zeros 1 to 31   J Day of the month without leading zeros and ordinal suffix 1st, 2nd, to 31st   w Numeric representation of the day of the week 0 (for Sunday) through 6 (for Saturday)   F A full textual representation of a month January through December   m Numeric representation of a month, with leading zero 01 through 12   n Numeric representation of a month, without leading zeros 1 through 12   M A short textual representation of a month Jan through Dec   U The number of seconds since the Unix Epoch 1413704993   y A two digit representation of a year 99 or 03   Y A full numeric representation of a year, 4 digits 1999 or 2003    Time Formatting Tokens    Character Description Example     H Hours (24 hours) 00 to 23   h Hours 1 to 12   i Minutes 00 to 59   S Seconds, 2 digits 00 to 59   s Seconds 0, 1 to 59   K AM/PM AM or PM    </description>
    </item>
    
    <item>
      <title>Localization</title>
      <link>https://chmln.github.io/flatpickr/localization/</link>
      <pubDate>Fri, 03 Mar 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/localization/</guid>
      <description>Dozens of locales are available.
flatpickr can be localized per-instance, or globally.
Using Modules ES modules (if your environment supports it)
import flatpickr from &amp;#34;flatpickr&amp;#34; import { Russian } from &amp;#34;flatpickr/dist/l10n/ru.js&amp;#34; flatpickr(myElem, { &amp;#34;locale&amp;#34;: Russian // locale for this instance only });  Using plain require()
const flatpickr = require(&amp;#34;flatpickr&amp;#34;); const Russian = require(&amp;#34;flatpickr/dist/l10n/ru.js&amp;#34;).default.ru; flatpickr(myElem, { &amp;#34;locale&amp;#34;: Russian // locale for this instance only });  Localize globally (for all instances):</description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>https://chmln.github.io/flatpickr/plugins/</link>
      <pubDate>Sat, 25 Mar 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/plugins/</guid>
      <description>Plugins are in essentially a set of hooks, that receive a config object (optionally) and a flatpickr instance
Functionality requested by users that doesn&amp;rsquo;t make it to core usually ends up in a plugin. The flatpickr repo comes with a few plugins.
confirmDate Provides a visual cue for users after selecting either:
 date + time multiple dates  { &amp;#34;enableTime&amp;#34;: true, &amp;#34;plugins&amp;#34;: [new confirmDatePlugin({})] }  A spiffy SVG icon is included, along with sane defaults, but you can customize them.</description>
    </item>
    
    <item>
      <title>Themes</title>
      <link>https://chmln.github.io/flatpickr/themes/</link>
      <pubDate>Sun, 09 Apr 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/themes/</guid>
      <description>Select Theme: Default 
 Usage To use a theme of your choice, simply load its corresponding CSS file.
For webpack builds and similar, you&amp;rsquo;d do something like:
require(&amp;#34;flatpickr/dist/themes/dark.css&amp;#34;);  Themes in browser environments Otherwise, if you&amp;rsquo;re constrained to a browser, just link the CSS file as a regular stylesheet.
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;https://npmcdn.com/flatpickr/dist/themes/dark.css&amp;#34;&amp;gt;  Available Themes Available theme names are listed in the theme selector on top of the page.</description>
    </item>
    
    <item>
      <title>Mobile Support</title>
      <link>https://chmln.github.io/flatpickr/mobile-support/</link>
      <pubDate>Sun, 23 Apr 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/mobile-support/</guid>
      <description>Native DateTime Input When flatpickr detects a mobile browser, it turns the date input into a native date/time/datetime input.
Native datetime selection provides a UX that&amp;rsquo;s familiar to the user and is superior to most web-based solutions.
There is no extra configuration necessary. However, native datetime selection is limited to the following features:
 Preloading a date/time/datetime minDate maxDate  Callbacks like onChange work as well.
Thus due to missing functionality in native datetime selection, using certain features (e.</description>
    </item>
    
    <item>
      <title>Usage in IE9</title>
      <link>https://chmln.github.io/flatpickr/ie9/</link>
      <pubDate>Sun, 23 Apr 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/ie9/</guid>
      <description>flatpickr should work out-of-the-box in IE10+, Safari 6+, Firefox, and Chrome.
IE9 flatpickr depends on classList which is absent from IE9, thus if you&amp;rsquo;re targeting IE9 you will need to include a polyfill.
Additionally, flatpickr has specific styles for IE9.
Make sure to include that as well, utilizing browser detection.
For instance,
&amp;lt;!--[if IE 9]&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;https://npmcdn.com/flatpickr/dist/ie.css&amp;#34;&amp;gt; &amp;lt;![endif]--&amp;gt;  If you&amp;rsquo;re using a bundler like webpack, see html-webpack-plugin</description>
    </item>
    
    <item>
      <title>Updating from flatpickr v2</title>
      <link>https://chmln.github.io/flatpickr/updating-from-v2/</link>
      <pubDate>Sun, 23 Apr 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/updating-from-v2/</guid>
      <description>Breaking changes in flatpickr v3 have been kept to a minimum to ensure an easy upgrade path for users.
Deprecation of the utc option Motivation The utc option was a hack using date manipulation. It didn&amp;rsquo;t yield the correct timezone. Resulting dates were not always accurate.
Upgrade path Use the dateFormat: &amp;quot;Z&amp;quot; option, which is a shortcut for the ISO date format. It contains the correct timezone information and is supported by nearly every database.</description>
    </item>
    
  </channel>
</rss>